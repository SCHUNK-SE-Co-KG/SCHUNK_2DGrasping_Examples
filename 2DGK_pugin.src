;DEF  SCHUNK2DGK  ( )
;DECL CHAR resp
;FOLD INI;%{PE}
  ;FOLD BASISTECH INI
    ;GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    ;INTERRUPT ON 3 
    ;BAS (#INITMOV,0 )
    ;
  ;ENDFOLD (BASISTECH INI)
  ;FOLD USER INI
    ;Make your modifications here

  ;ENDFOLD (USER INI)
  ;ENDFOLD (INI)
  ;
  ;resp = SCHUNK2DGK_getState()

;END

;FOLD SCHUNK 2D Grasping Kit Methods
;Made by: SCHUNK GmbH & Co KG
;Programmer: Fabian Reinwald
;Last changes: 20.06.2023
;Keep in mind to use the supplied SCHUNK_2DGrasping.xml and that it is located at 'C:/Config/User/Common/EthernetKRL
;Tested with KUKA EthernetKRL 3.2.4 (paid software)
;ENDFOLD (SCHUNK 2D Grasping Kit Methods)

;Helper function to make a request to the SVC (Schunk Vision Controller)
;DEFFCT CHAR SendRequest(messagetype:IN, body:IN)
   ;INT messagetype
   ;CHAR body
   ;CHAR message
   ;CHAR resp
   ;CAST_TO(message[], messagetype,body)
   ;RET=EKI_Init("SCHUNK_2DGrasping")
   ;RET=EKI_Open("SCHUNK_2DGrasping")
   ;RET=EKI_Send("SCHUNK_2DGrasping",message[])
   ;RET=EKI_GETSTRING("SCHUNK_2DGrasping", "Buffer", resp[])
   ;SWITCH messagetype
      ;CASE 0
         ;insert your code here
      ;CASE 1
         ;insert your code here
      ;CASE 2
         ;insert your code here
      ;CASE 3
         ;insert your code here
      ;CASE 256
         ;insert your code here
      ;DEFAULT
         ;insert your code here
   ;ENDSWITCH
   ;RETURN(resp)
;ENDFCT

;Reads grasp position out of huge response array
;GLOBAL DEFFCT FRAME extractPos(graspResponse:IN)
   ;DECL CHAR graspResponse
   ;DECL FRAME grasppos
   ;DECL BOOL result
   ;result=STRTOFRAME(graspResponse, grasppos)
   ;RETURN(grasppos)
;ENDFCT

;Request highest supported version of SVC server
;GLOBAL DEFFCT CHAR SCHUNK2DGK_getVersion()
   ;DECL CHAR req
   ;DECL CHAR resp
   ;CHAR Bytes[10]
   ;INT i
   ;FOR i=1 TO (10)  
    ;Bytes[i]=0
   ;ENDFOR
   ;CAST_TO(Bytes[],0,1,0,0,0,4,0,0,0,1)
   ;RET=EKI_Init("SCHUNK_2DGrasping")
   ;RET=EKI_Open("SCHUNK_2DGrasping")
   ;RET=EKI_Send("SCHUNK_2DGrasping",Bytes[])
   ;RET=EKI_GETSTRING("SCHUNK_2DGrasping", "Buffer", resp[])
   ;RETURN(resp)
;ENDFCT

;Request the state of the SVC. (1-initializing, 2-operational, 3-stopped, 4-error)
;GLOBAL DEFFCT INT SCHUNK2DGK_getState()
   ;DECL CHAR req
   ;DECL CHAR resp
   ;DECL INT state
   ;DECL BOOL result
   ;req = 'H0002'
   ;resp = SendRequest(req)
   ;result = STRTOINT(resp, state)
   ;RETURN(state)   
;ENDFCT

;Registers the KUKA Robot as Client - check if KUKA image appears in browser frontend
;GLOBAL DEFFCT BOOL SCHUNK2DGK_regClient()
   ;DECL CHAR req
   ;DECL INT resp
   ;DECL BOOL reqsuccess
   ;DECL BOOL result
   ;req = 'H0003'
   ;resp = SendRequest(req)
   ;result = STRTOBOOL(resp, reqsuccess)
   ;return(reqsuccess)   
;ENDFCT

;Request a grasp position
;Params:
;object class: 
;graspID displayed in the frontend in Objects tab
;mode:
;1-active (only use 'active' user grasp)
;2-any (use any user grasp)
;3-auto (use any user grasp with automatic planner as fallback)
;Returns Whole Response that needs to be spliced with further functions
;GLOBAL DEFFCT CHAR SCHUNK2DGK_getGrasp(objectClass: IN, mode: IN)
   ;DECL CHAR req
   ;DECL CHAR resp
   ;DECL INT objectClass
   ;DECL INT mode
   ;DECL CHAR body
   ;DECL BOOL result
   ;req = 'H0100'
   ;
   ;resp = SendRequest(req)
   ;RETURN(resp)
;ENDFCT

;Acknowledges that a specified object has been successfully grasped
;Params:
;object class:
;graspID displayed in the frontend in Objects tab

;GLOBAL DEFFCT INT SCHUNK2DGK_confirmGrasp()
   ;DECL CHAR req
   ;DECL INT resp
   ;req = 'H0101'
   ;resp = SendRequest(req)
   ;RETURN(resp)   
;ENDFCT

   ;